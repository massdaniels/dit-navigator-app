// app/routes/admin/qr-generator.tsx
import { useState } from 'react';
// CHANGE THIS IMPORT: Use named export QRCodeCanvas
import { QRCodeCanvas } from 'qrcode.react';
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Shell } from "~/components/dashboard/shell";
import BreadCrumb from "~/components/dashboard/breadcrumb";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "~/components/ui/dialog";
import { CopyIcon, DownloadIcon, QrCodeIcon } from 'lucide-react';
import { ExclamationTriangleIcon } from '@radix-ui/react-icons';
import { toast } from '~/components/ui/use-toast';

export const breadcrumbItems = [
  { title: "QR Generator", link: "/dashboard/qr-generator" },
];

export default function QRGeneratorPage() {
  const [latitude, setLatitude] = useState<string>('');
  const [longitude, setLongitude] = useState<string>('');
  const [generatedUrl, setGeneratedUrl] = useState<string | null>(null);
  const [isQrDialogOpen, setIsQrDialogOpen] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleGenerateQR = () => {
    setError(null);
    const lat = parseFloat(latitude);
    const lon = parseFloat(longitude);

    if (isNaN(lat) || isNaN(lon) || lat < -90 || lat > 90 || lon < -180 || lon > 180) {
      setError("Please enter valid latitude (-90 to 90) and longitude (-180 to 180).");
      setGeneratedUrl(null);
      return;
    }

    const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000';
    const url = `${baseUrl}?lat=${lat}&lon=${lon}`;
    setGeneratedUrl(url);
    setIsQrDialogOpen(true);
  };

  const handleDownload = () => {
    if (generatedUrl) {
      // The ID for the canvas generated by QRCodeCanvas needs to match here
      const canvas = document.getElementById('generated-qrcode-canvas') as HTMLCanvasElement;
      if (canvas) {
        const pngUrl = canvas.toDataURL('image/png');
        const downloadLink = document.createElement('a');
        downloadLink.href = pngUrl;
        downloadLink.download = `qr-location-${latitude.replace('.', '-')}-${longitude.replace('.', '-')}.png`;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      }
    }
  };

  const handleCopy = () => {
    if (generatedUrl) {
      navigator.clipboard.writeText(generatedUrl);
        
            toast({
              variant: "default",
              description: "QR Code Copied to the clipboard", // "Invalid credentials"
            });
          
    }
  };

  return (
<Shell variant="sidebar">
  <BreadCrumb items={breadcrumbItems} />
  <div className="flex flex-col gap-8 p-6 max-w-2xl mx-auto">
    <header className="space-y-2">
      <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Generate Location QR Code</h1>
      <p className="text-gray-600 dark:text-gray-400">
        Create a scannable QR code that opens a map at your specified coordinates
      </p>
    </header>

    <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 space-y-6">
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded" role="alert">
          <div className="flex items-center">
            <ExclamationTriangleIcon className="h-5 w-5 text-red-500 mr-2" />
            <p className="text-red-700 font-medium">{error}</p>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="latitude" className="text-gray-700 dark:text-gray-300">
            Latitude
          </Label>
          <Input
            id="latitude"
            type="number"
            step="any"
            value={latitude}
            onChange={(e) => setLatitude(e.target.value)}
            placeholder="e.g., -6.7924"
            className="w-full"
          />
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="longitude" className="text-gray-700 dark:text-gray-300">
            Longitude
          </Label>
          <Input
            id="longitude"
            type="number"
            step="any"
            value={longitude}
            onChange={(e) => setLongitude(e.target.value)}
            placeholder="e.g., 39.2083"
            className="w-full"
          />
        </div>
      </div>

      <Button 
        onClick={handleGenerateQR}
        variant="primary"
        className="w-full md:w-auto px-6 py-3"
      >
        <QrCodeIcon className="h-5 w-5 mr-2" />
        Generate QR Code
      </Button>
    </div>

    <Dialog open={isQrDialogOpen} onOpenChange={setIsQrDialogOpen}>
      <DialogContent className="sm:max-w-md rounded-xl">
        <DialogHeader>
          <DialogTitle className="text-xl font-semibold">Location QR Code</DialogTitle>
          <DialogDescription className="text-gray-600 dark:text-gray-400">
            Scan this code to view the coordinates on a map
          </DialogDescription>
        </DialogHeader>
        
        <div className="flex flex-col items-center space-y-6 p-4">
          {generatedUrl ? (
            <>
              <div className="p-4 bg-white rounded-lg border border-gray-200 dark:bg-gray-800 dark:border-gray-700">
                <QRCodeCanvas
                  value={generatedUrl}
                  size={256}
                  level="H"
                  includeMargin={true}
                  id="generated-qrcode-canvas"
                  fgColor="#1e40af"
                />
              </div>
              
              <div className="w-full space-y-2">
                <Label htmlFor="generated-url" className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Generated URL
                </Label>
                <div className="flex gap-2">
                  <Input 
                    id="generated-url" 
                    value={generatedUrl} 
                    readOnly 
                    className="flex-1 text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700" 
                  />
                  <Button 
                    variant="outline" 
                    onClick={handleCopy}
                    className="shrink-0"
                  >
                    <CopyIcon className="h-4 w-4 mr-2" />
                    Copy
                  </Button>
                </div>
              </div>
            </>
          ) : (
            <div className="py-8 text-center text-gray-500">
              <p>No QR code generated yet</p>
            </div>
          )}
        </div>
        
        <DialogFooter className="flex flex-col sm:flex-row gap-3">
          <Button 
            variant="outline" 
            onClick={() => setIsQrDialogOpen(false)}
            className="flex-1"
          >
            Close
          </Button>
          <Button 
            onClick={handleDownload} 
            disabled={!generatedUrl}
            variant="primary"
            className="flex-1"
          >
            <DownloadIcon className="h-4 w-4 mr-2" />
            Download QR Code
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  </div>
</Shell>
  );
}