// app/components/map-features/qr-code-display-dialog.tsx
import { useState, useEffect } from 'react';
// CHANGE THIS IMPORT: Use named export QRCodeCanvas
import { QRCodeCanvas } from 'qrcode.react'; // Import the QR code library
import { Button } from "~/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from "~/components/ui/dialog";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { MapFeature } from "~/types/geojson";

interface QrCodeDisplayDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  feature: MapFeature | null;
}

export function QrCodeDisplayDialog({ open, onOpenChange, feature }: QrCodeDisplayDialogProps) {
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');

  useEffect(() => {
    if (feature) {
      const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'http://localhost:3000';
      const url = `${baseUrl}/map/view/${feature.id}`;
      setQrCodeUrl(url);
    } else {
      setQrCodeUrl('');
    }
  }, [feature]);

  const handleDownload = () => {
    if (qrCodeUrl) {
      // The ID for the canvas generated by QRCodeCanvas needs to match here
      const canvas = document.getElementById('qrcode-canvas') as HTMLCanvasElement;
      if (canvas) {
        const pngUrl = canvas.toDataURL('image/png');
        const downloadLink = document.createElement('a');
        downloadLink.href = pngUrl;
        downloadLink.download = `qr-code-${feature?.id || 'feature'}.png`;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      }
    }
  };

  const handleCopy = () => {
    if (qrCodeUrl) {
      navigator.clipboard.writeText(qrCodeUrl);
      alert("URL copied to clipboard!");
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>QR Code for {feature?.properties.name || 'Feature'}</DialogTitle>
          <DialogDescription>
            Scan this QR code to view the feature on the map.
          </DialogDescription>
        </DialogHeader>
        <div className="flex flex-col items-center justify-center p-4">
          {qrCodeUrl ? (
            <>
              {/* CHANGE THIS USAGE: Use QRCodeCanvas */}
              <QRCodeCanvas
                value={qrCodeUrl}
                size={256}
                level="H"
                includeMargin={true}
                id="qrcode-canvas" // ID for canvas to enable download
              />
              <div className="mt-4 w-full">
                <Label htmlFor="qr-url" className="sr-only">QR Code URL</Label>
                <Input id="qr-url" value={qrCodeUrl} readOnly className="text-center" />
              </div>
            </>
          ) : (
            <p>Select a feature to generate a QR code.</p>
          )}
        </div>
        <DialogFooter className="flex-col sm:flex-row sm:justify-end gap-2">
          <Button variant="outline" onClick={handleCopy}>Copy URL</Button>
          <Button onClick={handleDownload} disabled={!qrCodeUrl}>Download QR Code</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}